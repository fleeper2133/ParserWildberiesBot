import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from parser.parser_async import ParserAsync
from parser.search_keywords import MistralClient, SearchByMistral
from parser.browser_pool import BrowserPool
from dotenv import load_dotenv
import os

load_dotenv()
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
MISTRAL_MODEL = os.getenv("MISTRAL_MODEL") or "open-mistral-7b"
MAX_BROWSERS = os.getenv("MAX_BROWSERS") or 5
QUANTITY_KEYWORDS = os.getenv("QUANTITY_KEYWORDS") or 10
MAX_POSITIONS = os.getenv("MAX_POSITIONS") or 1000

try:
    MAX_BROWSERS = int(MAX_BROWSERS)
    QUANTITY_KEYWORDS = int(QUANTITY_KEYWORDS)
    MAX_POSITIONS = int(MAX_POSITIONS)
except ValueError:
    print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

if not BOT_TOKEN:
    print("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    exit(1)
if not MISTRAL_API_KEY:
    print("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á API Mistral")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
browser_pool = BrowserPool(max_browsers=MAX_BROWSERS)
parser = ParserAsync(browser_pool)
client = MistralClient(MISTRAL_API_KEY, MISTRAL_MODEL)
search = SearchByMistral(client, QUANTITY_KEYWORDS)

async def update_message(chat_id, message_id, text):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º HTML-—Ç–µ–≥–∏
        safe_text = text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ HTML-—Ç–µ–≥–∏
        safe_text = safe_text.replace("&lt;b&gt;", "<b>").replace("&lt;/b&gt;", "</b>")
        safe_text = safe_text.replace("&lt;i&gt;", "<i>").replace("&lt;/i&gt;", "</i>")
        safe_text = safe_text.replace("&lt;code&gt;", "<code>").replace("&lt;/code&gt;", "</code>")
        
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=safe_text,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def create_progress_message(chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    return await bot.send_message(
        chat_id=chat_id,
        text="<b>üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞...</b>",
        parse_mode="HTML"
    )

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries, "
        "–∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n\n"
        "–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:\n"
        "https://www.wildberries.ru/catalog/12345678/detail.aspx"
    )

@dp.message()
async def handle_product_url(message: Message):
    url = message.text.strip()
    
    if not url.startswith("https://www.wildberries.ru/catalog/") or "/detail.aspx" not in url:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
    main_msg = await create_progress_message(message.chat.id)
    
    try:
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞
        await update_message(
            main_msg.chat.id, main_msg.message_id,
            "üîÑ <b>–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...</b>"
        )
        
        product_info = await parser.parse_product(url)
        if not product_info:
            await update_message(
                main_msg.chat.id, main_msg.message_id,
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.</b>"
            )
            return
        
        # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        await update_message(
            main_msg.chat.id, main_msg.message_id,
            f"üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä:</b>\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_info['title']}\n"
            f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {product_info['article']}\n\n"
            f"üîë <b>–ò–∑–≤–ª–µ–∫–∞—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...</b>"
        )
        
        keywords = await search.search_key_words(product_info['title'], product_info['description'])
        
        # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = []
        base_text = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞:</b>\n"
            f"<b>{product_info['title']}</b>\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: {product_info['article']}\n\n"
            f"üîç <b>–ü–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ:</b>\n"
        )
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await update_message(
            main_msg.chat.id, main_msg.message_id,
            base_text + "\n<i>–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π...</i>"
        )
        
        tasks = [parser.check_position(keyword, product_info['article'], MAX_POSITIONS//100) 
                for keyword in keywords]
        
        found_positions = []
        for i, task in enumerate(asyncio.as_completed(tasks), 1):
            result = await task
            found_positions.append(result)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            sorted_results = sorted(
                found_positions,
                key=lambda x: x['position'] if x['position'] else 9999
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            results_text = "\n".join(
                f"{'‚úÖ' if r['position'] else '‚ùå'} {r['position'] or '--'}: {r['keyword']}"
                for r in sorted_results
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π
            if i % 2 == 0 or i == len(tasks):
                progress = f"\n\n‚è≥ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {i} –∏–∑ {len(tasks)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
                await update_message(
                    main_msg.chat.id, main_msg.message_id,
                    base_text + results_text + progress
                )
        
        # 5. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        final_sorted = sorted(
            found_positions,
            key=lambda x: x['position'] if x['position'] else 9999
        )
        
        results_text = "\n".join(
            f"{'üîπ' if r['position'] else 'üî∏'} {r['position'] or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}: <code>{r['keyword']}</code>"
            for r in final_sorted
        )
        
        await update_message(
            main_msg.chat.id, main_msg.message_id,
            base_text + results_text + 
            f"\n\n‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
            f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(keywords)} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {MAX_POSITIONS} –ø–æ–∑–∏—Ü–∏–π"
        )
        
    except Exception as e:
        await update_message(
            main_msg.chat.id, main_msg.message_id,
            f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n{str(e)}"
        )
    finally:
        await browser_pool.close_all()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())